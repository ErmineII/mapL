#!/usr/bin/env lua-any
-- Lua-Versions: 5.3 5.2 5.1

lisp = require('lisp')

lisp.begin()

function process(ioargs, processed) -- process command-line options
  local indx = 1
  local processed = processed or {}
  while indx <= #ioargs do
    local curr = ioargs[indx]
    if curr == "--" then
      indx = indx + 1
      while ioargs[indx] do
        table.insert(processed, ioargs[indx])
        indx = indx + 1
      end
      return processed
    end
    if curr:sub(1,2) == "--" then --long options like --word=yes
      local option = curr:match('^..([^=]*)=?') --option name like word
      if processed[option] ~= nil then -- if this has an argument
        processed[option] =
          curr:match('^..[^=]*=(.*)$') or true --processed.word = 'yes'
        if processed[option] == true then -- or like '--word yes'
          indx = indx + 1
          processed[option] = ioargs[indx]
        end
      else -- or just record that that option was found
        processed[option] = true
      end
    elseif curr:sub(1,1) == "-" then --short option
      while curr ~= "" do
        curr = curr:sub(2)
        local opt = curr:sub(1,1)
        if processed[opt] ~= nil then --option requires argument
          if curr:len() > 1 then
            processed[opt] = curr:sub(2)
          else
            indx = indx + 1
            processed[opt] = ioargs[indx]
          end
          break
        end -- otherwise, just record the option
        processed[opt] = true
      end
    else -- option not starting with -
      table.insert(processed, curr)
    end 
    indx = indx + 1
  end
  return processed
end

opts = process(arg, {prompt=false, p=false,})
--[[
for key, file in ipairs(opts) do
  lisp.load(file)
  --print(file)
end
--]]
if not(opts.q or opts.quiet) then
  print(lisp.Banner)
end

prompt = opts.p or opts.prompt or "Î»> "
repeat
  io.write(prompt)
  local expression = lisp.read(nil,nil,true)
  if expression == nil then return nil end
  prev = lisp.eval(expression[1])
  lisp.env['@'] = prev
  if prev then print(lisp.toString(prev)) end
until (expression == nil)
