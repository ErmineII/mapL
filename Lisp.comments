


Lisp, in Lua!










Lisp will be exported with functions and types
  and with the license


The Cons class:

can be created with :new()
has a CAR and CDR















Read function takes the data out of a
string and puts it in CONSes
trim whitespace to make things consistent
if it is a list, like "((abc cba) def(ghi)jkl)"
  the CAR would be "(<(abc cba)> def...)"
  the CDR would be (in parentheses)
    "((abc cba) <def(ghi)jkl>)"
  this counts the CAR as "(abc", so check if parentheses are matched

    move one char over so CDR="(abc ", CDR="cba) def(ghi)jkl" then
      CDR="(abc c", CDR="ba) def(ghi)jkl" ...
      CDR="(abc cba)", CDR="def(ghi)jkl" and
             the parentheses are balanced so no more while loop!



  lists end in NIL, or "()" (this helps not recurse infinitely)
  return a CONS with the
    CAR (which is read if it is a list, otherwise it's an atom)
    and the (recursively found) value of the CDR

otherwise it's an atom so just return
 it (it's already been trimmed)



the parBalanced helper function takes a string and
tells if the number of opening and closing parentheses are equal





Trim function just removes whitespace around 
 parentheses and extra whitespace (like multiple
 consecutive spaces












export Cons and itsfunctions

export
